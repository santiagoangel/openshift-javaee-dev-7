<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- JBoss, Home of Professional Open Source Copyright 2015, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.santiagoangel.openshift</groupId>
	<artifactId>openshift-javaee-dev-7</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>openshift-javaee-dev-7</name>
	<description>Openshift-javaee-dev. HTML5/ Java EE 7 application with JPA, JAX-RS, Bean validation, security &amp; PatternFly.</description>

	<url>https://github.com/santiagoangel/openshift-javaee-dev</url>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<!-- Activate the JBoss Enterprise Maven Repository. NOTE: Configuring the 
		Maven repository in the pom.xml file is not a recommended procedure and is 
		only done here to make it easier to use the quickstarts. For more information 
		about how to configure Maven for your application, see the section entitled 
		'Use the Maven Repository' in the Development Guide for Red Hat JBoss Enterprise 
		Application Platform located here: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/ -->
	<repositories>
		<repository>
			<id>jboss-developer-staging-repository</id>
			<url>http://jboss-developer.github.io/temp-maven-repo/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>jboss-developer-staging-repository</id>
			<url>http://jboss-developer.github.io/temp-maven-repo/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- EAP component version management BOM -->
		<version.jboss.bom.eap>7.0.0.GA</version.jboss.bom.eap>

		<!-- WildFly Maven plug-in to deploy your WAR to a local JBoss EAP container -->
		<version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>

		<!-- other plug-in versions -->
		<version.war.plugin>2.6</version.war.plugin>
		
		<version.javax.servlet.jstl>1.2</version.javax.servlet.jstl>
		<version.deltaspike>1.0.1</version.deltaspike>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-eap-javaee7 stack -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-eap-javaee7</artifactId>
				<version>${version.jboss.bom.eap}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss EAP -->

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Bean Validation Implementation Provides portable constraints such 
			as @Email Hibernate Validator is shipped in JBoss EAP -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- Import the Servlet API, we use provided scope as the API is included in JBoss EAP. -->
        <dependency>
            <groupId>org.jboss.spec.javax.servlet</groupId>
            <artifactId>jboss-servlet-api_3.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
		
		<!-- JSTL 1.2 or + -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${version.javax.servlet.jstl}</version>
            <scope>runtime</scope>
        </dependency>
    <!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss EAP -->
        <dependency>
            <groupId>org.jboss.spec.javax.ws.rs</groupId>
            <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
            <scope>provided</scope>
        </dependency>

		<!--Import dependencies to hibernate packages(eg. hibernate-core) depending 
			on features you want to use like Hibernate Session used in the quickstart. 
			Scope is provided because these JARs are shipped with JBoss EAP -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
    <groupId>org.picketlink</groupId>
    <artifactId>picketlink</artifactId>
    <version>2.7.1.Final</version>

			<exclusions>
				<exclusion>
					<groupId>org.jboss.security</groupId>
					<artifactId>jbossxacml</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		

		<dependency>
			<groupId>org.picketlink</groupId>
			<artifactId>picketlink-idm-simple-schema</artifactId>
			<version>2.7.1.Final</version>
		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
			<version>7.1.1.Final</version>

		</dependency>
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cdi</artifactId>
			<version>7.1.1.Final</version>

		</dependency>

		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cachestore-jdbc</artifactId>
			<version>7.1.1.Final</version>
		</dependency>

		<!-- Deltaspike modules -->
		
<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-servlet-module-api</artifactId>
			<version>${version.deltaspike}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.deltaspike.core</groupId>
					<artifactId>deltaspike-core-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.deltaspike.modules</groupId>
			<artifactId>deltaspike-servlet-module-impl</artifactId>
			<version>${version.deltaspike}</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.deltaspike.core</groupId>
					<artifactId>deltaspike-core-impl</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.deltaspike.core</groupId>
					<artifactId>deltaspike-core-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>




		<!-- ends Deltaspike modules -->
		
		
		
		 <!--  jboss-logging API -->
        <dependency>
            <groupId>org.jboss.logging</groupId>
            <artifactId>jboss-logging</artifactId>
            <scope>provided</scope>
        </dependency>
        
       
	</dependencies>

	<build>
		<!-- Set the name of the WAR, used as the context root when the app is 
			deployed -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The WildFly plug-in deploys your WAR to a local JBoss EAP container. 
				To use, run: mvn package wildfly:deploy -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>${version.wildfly.maven.plugin}</version>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
